{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#291-24th-september-2025","title":"2.9.1 [24th September 2025]","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fixed unexpectedly high CPU usage via updating textual-autocomplete to 4.0.6.</li> </ul>"},{"location":"CHANGELOG/#290-17th-september-2025","title":"2.9.0 [17th September 2025]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Path parameter support (<code>:param</code> syntax) (#295)</li> <li>New built-in themes: <code>hypernova</code>, <code>synthwave</code>. (#300)</li> <li>Added <code>export: copy as YAML</code> command to the command palette (#299)</li> </ul>"},{"location":"CHANGELOG/#280-13th-september-2025","title":"2.8.0 [13th September 2025]","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Update to Textual 6.1.0 from 3.0.0.</li> <li>Remove notification when creating + opening a new request.</li> </ul>"},{"location":"CHANGELOG/#271-22nd-july-2025","title":"2.7.1 [22nd July 2025]","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Pin tree-sitter to &lt;0.25.0 to fix crash due to breaking API change.</li> </ul>"},{"location":"CHANGELOG/#270-19th-april-2025","title":"2.7.0 [19th April 2025]","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Collections can now be imported from Postman (#106)</li> <li><code>posting.env</code> files in the current directory will automatically be loaded if no <code>--env</code> options are provided (#249)</li> <li>Generate JSON body with default values after importing OpenAPI specs (#247)</li> <li>Use tags to separate sub-collections in OpenAPI specs (#247)</li> <li>curl import now handles various different data options (#252)</li> <li>Added <code>-c</code> shorthand alias for <code>--collection</code> option (#250)</li> <li>Added <code>posting sponsors</code> command, which lists people who have supported Posting via GitHub Sponsors (specific sponsor tiers only). (#253)</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>A double-click rather than a single-click is now required to enter edit mode inside data tables (e.g. headers, query params, etc.) (#256)</li> <li>In the body editor, the <code>Form data</code> menu item now shows <code>(x-www-form-urlencoded)</code> after the label, to suggest the type of data being sent. (#259)</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Exported curl command uses <code>-d</code> for form data now, rather than <code>-F</code>. The result is exported commands with form data will now use <code>application/x-www-form-urlencoded</code> instead of <code>multipart/form-data</code> (matching Posting's behaviour). (#252)</li> <li>Fix attempting to add a protocol before applying variables in the URL bar (#248)</li> <li>Fix script path with custom function (#254)</li> <li>Fixed Posting's default <code>User-Agent</code> header not being used (#259)</li> </ul>"},{"location":"CHANGELOG/#260-29th-march-2025","title":"2.6.0 [29th March 2025]","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Added <code>spacing: &lt;compact|standard&gt;</code> config to allow for a more compact UI (default: <code>standard</code>).</li> <li>Added ability to edit headers, form data, and query params without deleting and recreating them.<ul> <li>Press <code>enter</code> or click a row to enter edit mode. The row will be highlighted, and focus will move to the key/name input.     Submitted changes will overwrite the existing row rather than adding a new one.</li> <li>Press <code>v</code> to enter edit mode and immediately focus on the value input.</li> <li>Press <code>escape</code> to cancel the edit.</li> <li>Press <code>enter</code> to save the changes and exit edit mode.</li> <li>The background colour behind the input will update to indicate edit mode is active.</li> </ul> </li> <li>Added autocompletion for header values based on the header name.<ul> <li>For example, if the header is <code>Content-Type</code>, when typing the value, you'll be able to quickly autocomplete from a list of common content types.</li> </ul> </li> <li>Press <code>/</code> to open the request search palette while the collection browser is focused.<ul> <li><code>ctrl+shift+p</code> remains available as a global shortcut for this.</li> </ul> </li> <li>Added <code>help: Open web docs</code> command to the command palette.</li> <li>Basic Vim motions to script output log (<code>hjkl</code>).</li> <li>Added response status code label to the URL bar.</li> <li>Contributing guide added to the GitHub repo (<code>CONTRIBUTING.md</code>).</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Rewrite of the autocompletion system used to autocomplete header names, values, URLs, and variables.</li> <li>Automatically prepend <code>http://</code> protocol if no protocol is specified in the URL bar.</li> <li>Debounce jump overlay recomposition - if you resize while the jump overlay is open, it'll wait a short period before recomputing.</li> <li>Jump mode now lives on the main screen, rather than globally. This makes more sense as it's only available on the main screen. The only user-facing impact should be that the position of the keybinding in the footer and keybindings panel may change.</li> <li>Jump mode interaction with Tabs now uses the Tabs API, rather than simulating a Click.</li> <li>Status code label now displayed in the URL bar beside the trace markers.</li> <li>Request description area at the bottom of the collection browser has new design.</li> <li>When there are no response cookies, the cookies section will now display a message to the user.</li> <li>Updated to Textual 3.0.0.</li> <li>Various updates to the https://posting.sh homepage.</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed scrolling in response headers and cookies tabs using keyboard.</li> <li>Fixed crash when immediately pressing enter after loading the UI when the <code>on_startup</code> config is set to <code>url</code> (this was due to lazy loading of the UI, and attempting to send a request before the UI was fully loaded).</li> <li>Fixed accepting a completion via enter in the header editor also adding the header.<ul> <li>Now, the first enter press will accept the completion, and the second enter press will add the header.</li> </ul> </li> <li>Fixed Textual markup not being escaped key value tables.</li> <li>Fixed request description attempting to parse Textual markup (#243)</li> </ul>"},{"location":"CHANGELOG/#254-13th-march-2025","title":"2.5.4 [13th March 2025]","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Prioritise user-defined <code>User-Agent</code> header over Posting's default.</li> </ul>"},{"location":"CHANGELOG/#253-13th-march-2025","title":"2.5.3 [13th March 2025]","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Lazily load content of tabs which are hidden on startup (100ms saved at startup).</li> <li>Only import openapi-pydantic when importing OpenAPI specs via <code>posting import</code> (63ms saved at startup).</li> <li>Pin httpx and patch out httpx._main to prevent slow import (20ms saved at startup).</li> <li>Defer import of watchfiles until app is running (6ms saved at startup).</li> <li>Defer <code>HelpScreen</code> import until it's used (10ms saved at startup).</li> </ul>"},{"location":"CHANGELOG/#252-8th-march-2025","title":"2.5.2 [8th March 2025]","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Validation and corresponding UI feedback in New Request modal.</li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Fixed crash when attempting to delete a request that doesn't exist on disk.</li> <li>Fixed being able to create requests with empty names.</li> </ul>"},{"location":"CHANGELOG/#251-7th-march-2025","title":"2.5.1 [7th March 2025]","text":""},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Fixed importing of <code>max-time</code> from curl commands.</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>When importing a request from curl, request metadata (name, description) will not be overwritten.</li> </ul>"},{"location":"CHANGELOG/#250-7th-march-2025","title":"2.5.0 [7th March 2025]","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Added bearer token auth support in the <code>Auth</code> tab.</li> <li>Added support for importing securitySchemes in OpenAPI specs.</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>OpenAPI specs are now parsed using an external library (<code>openapi-pydantic</code>).</li> </ul>"},{"location":"CHANGELOG/#241-6th-march-2025","title":"2.4.1 [6th March 2025]","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Added command palette option to export the request as a curl command without running setup scripts.</li> <li>Added new documentation on working with the response in Posting and via external pagers/editors.</li> <li>Added new documentation on saving requests into folder structures from within Posting.</li> </ul>"},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Fixed crash when toggling rows via clicking the checkbox</li> <li>Fixed erroneous trailing ellipsis in <code>Info</code> tab.</li> <li>Fixed error messages in toasts on read and write timeouts.</li> </ul>"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Variables will be substituted into exported curl commands.<ul> <li>Undefined variables will be left as is (e.g. <code>$foo</code> will be left as <code>$foo</code> in the curl command)</li> </ul> </li> <li>Setup scripts will now run by default when exporting to curl.</li> <li>Do not focus the URL bar when an error occurs on sending a request.</li> <li>Small visual refinement in <code>Scripts</code> tab.</li> </ul>"},{"location":"CHANGELOG/#240-2nd-march-2025","title":"2.4.0 [2nd March 2025]","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Added ability to toggle rows in tables on and off (press <code>space</code> or click the checkbox to toggle).</li> <li>Added \"Export to curl\" option in the command palette, to copy the request to your clipboard as a curl command.</li> <li>Added <code>curl_export_extra_args</code> config to allow for adding extra arguments to the curl command copied to your clipboard.</li> <li>Allow for customisation of \"open in editor\" and \"open in pager\" keys (<code>open-in-editor</code> and <code>open-in-pager</code> in the keymap).</li> <li>Added ability to quickly search for request by name and jump to it (press <code>ctrl+shift+p</code> to open the search popup).</li> <li>Added configurable keybinding <code>search-requests</code> (default: <code>ctrl+shift+p</code>).</li> <li>A few more screenshots were added to the \"Navigation\" guide.</li> <li>Added new headers to autocompletion: <code>Accept-Charset</code>, <code>DNT</code>, <code>Upgrade</code>, <code>Sec-Fetch-Site</code>, <code>Sec-Fetch-Mode</code>, <code>Sec-Fetch-User</code>, <code>Sec-Fetch-Dest</code>, and <code>Service-Worker-Navigation-Preload</code>.</li> <li>Removed some headers from autocompletion (due to being deprecated or response-only headers).</li> </ul>"},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Upgraded Textual from version 0.86.0 to 2.1.1.</li> </ul>"},{"location":"CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>Fixed variable preview not being shown below URL bar when cursor is over a variable.</li> <li>Fixed <code>ctrl+?</code> keybinding not opening contextual help on some terminals.</li> </ul>"},{"location":"CHANGELOG/#231-1st-march-2025","title":"2.3.1 [1st March 2025]","text":""},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Renamed \"Change theme\" to \"Preview theme\" in command palette, and update description to not imply the change persists across sessions (use the config file for persistent changes).</li> </ul>"},{"location":"CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>Fixed crash when invalid syntax theme is specified. Posting now exits cleanly with an error message.</li> <li>Fixed toast message on copying text referring to \"Response text\" regardless of what text was copied.</li> <li>Fixed error handling and messaging when themes contain invalid syntax, invalid values. Includes batching errors and displaying multiple in one message.</li> <li>Fixed animation level config no longer being respected.</li> <li>Fixed missing <code>get_variable</code> method in scripting API that was described in docs but not implemented.</li> </ul>"},{"location":"CHANGELOG/#230-19th-november-2024","title":"2.3.0 [19th November 2024]","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Editing a theme on disk will result in the UI refreshing in real-time to reflect changes.</li> </ul>"},{"location":"CHANGELOG/#220-17th-november-2024","title":"2.2.0 [17th November 2024]","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Added 15 new themes (4 specific to Posting, 11 inherited from Textual's new theme system).</li> <li>Themes are now in submenu of command palette.</li> <li>Keybinding assistant can now be displayed as a sidebar, teaching you keybindings as you go.</li> <li>New tooltips when hovering over collection browser keybinds in the app footer.</li> </ul>"},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Syntax highlighting colours now derive automatically from the current theme.</li> <li>URL bar highlighting now derives automatically from the current theme.</li> <li>Method colour-coding in the collection browser is now derived automatically from the current theme.</li> <li>Jump mode UI has been refined to be more readable.</li> <li>Various refinements to existing themes.</li> <li>Options and descriptions in command palette reworded and reordered for clarity.</li> <li>Updated to Textual 0.86.1.</li> </ul>"},{"location":"CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>Fixed error notification not rendering correctly when HTTP request times out.</li> </ul>"},{"location":"CHANGELOG/#211-12th-november-2024","title":"2.1.1 [12th November 2024]","text":""},{"location":"CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li>Fix collection browser message not being visible when it's empty.</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Improved message in empty collection browser, indicating keybind for how to toggle the collection browser.</li> </ul>"},{"location":"CHANGELOG/#210-11th-november-2024","title":"2.1.0 [11th November 2024]","text":""},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Import curl command by pasting it into the URL bar.</li> </ul>"},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Collection browser width now adjusts based on content, so it doesn't waste a lot of space on larger screens.</li> <li>Info tab now shows \"Request not saved to disk\" if a request has not been saved to disk, rather than \"None\" or nothing at all.</li> </ul>"},{"location":"CHANGELOG/#200-18th-october-2024","title":"2.0.0 [18th October 2024]","text":""},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Scripting: Run Python scripts before and after sending requests. Scripts can be used to perform setup, set variables, modify requests, and more.<ul> <li>Define \"setup\", \"pre-request\" and \"post-request\" Python functions and attach them to requests.</li> <li>Posting will automatically reload these functions when they change, meaning you can edit them in an external editor while Posting is running.</li> <li>Scripts can be used to directly manipulate the request, set variables which are used in the request (e.g. set a <code>$token</code> variable which is used in the request URL).</li> <li>Output from scripts is captured and displayed in the \"Scripts\" tab.</li> </ul> </li> <li>Keymaps: Change the default keybindings for any of Posting's \"global\" actions (e.g. sending request, opening jump mode, etc.) by editing <code>keymap</code> section of your <code>config.yaml</code> file.</li> <li>Added <code>heading.hostname</code> config to allow customisation of the hostname in the header. This field supports Rich markup. You may wish to use this to apply highlighting when <code>posting</code> is running on a production system vs a development environment, for example.</li> <li>Added <code>focus.on_request_open</code> config to automatically shift focus when a request is opened via the collection browser. For example, you might prefer to have focus jump to the \"Body\" tab when a request is opened.</li> <li>More detail and screenshots added to several sections of the guide.<ul> <li>Much more detail added to the \"Getting Started\" section.</li> <li>Collections guide updated to explain more about the collection browser.</li> <li>Guide for Keymaps added.</li> <li>Guide for Scripting added.</li> <li>Guide for External Tools added (integrating with vim, less, fx, etc.)</li> </ul> </li> <li><code>alt</code>+<code>enter</code> can now be used to send a request (in addition to the existing <code>ctrl+j</code> binding).</li> <li>Tooltips added to more actions in the app footer. These appear on mouse hover.</li> </ul>"},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Automatically apply <code>content-type</code> header based on the body type selected in the UI.</li> <li>Updated to Textual 0.83.0</li> <li>Various refinements to autocompletion, upgrading to textual-autocomplete 3.0.0a12.</li> <li>Dependency specifications loosened on several dependencies.</li> <li>Recommended installation method changed from rye to uv.</li> </ul>"},{"location":"CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>Fixed double rendering in \"jump mode\" overlay.</li> <li>Fixed sidebar not working on mobile on https://posting.sh</li> <li>Fixed autocompletion appearing when on 1 item in the list and the \"search string\" is equal to that item.</li> </ul>"},{"location":"CHANGELOG/#1130-8th-september-2024","title":"1.13.0 [8th September 2024]","text":""},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>New <code>collection_browser.show_on_startup</code> config to control whether the collection browser is shown on startup.</li> <li>Watch for changes to loaded dotenv files and reload UI elements that depend on them when they change.</li> </ul>"},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Upgraded all dependencies.</li> <li>Remove <code>pydantic-settings</code> crash workaround on empty config files.</li> <li>Renaming <code>App.maximized</code> as it now clashes with a Textual concept.</li> <li>Removed \"using default collection\" message from startup.</li> </ul>"},{"location":"CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>Fixed crash while rendering error message on timeout.</li> </ul>"},{"location":"CHANGELOG/#1123-4th-september-2024","title":"1.12.3 [4th September 2024]","text":""},{"location":"CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>Fixed crash when no clipboard tool installed</li> </ul>"},{"location":"CHANGELOG/#1122-4th-september-2024","title":"1.12.2 [4th September 2024]","text":"<p>This release was yanked. It's functionally identical to 1.12.1.</p>"},{"location":"CHANGELOG/#1121-21st-august-2024","title":"1.12.1 [21st August 2024]","text":""},{"location":"CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>Fix \"invalid escape sequence\" warnings on Python 3.12+</li> <li>Fix buttons in request deletion confirmation modal not being usable with the enter key.</li> </ul>"},{"location":"CHANGELOG/#1120-17th-august-2024","title":"1.12.0 [17th August 2024]","text":""},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li>Colour-coding of methods in the collection browser.</li> <li>Added FAQ to website.</li> </ul>"},{"location":"CHANGELOG/#1110-15th-august-2024","title":"1.11.0 [15th August 2024]","text":""},{"location":"CHANGELOG/#added_13","title":"Added","text":"<ul> <li>This file, <code>CHANGELOG.md</code>.</li> <li>Launch docs website.</li> <li>Duplicate request (with new request popup) under cursor in tree with D.</li> <li>\"Quick\" duplicate request (without new request popup, request name is auto-generated) under cursor in tree with Shift+D.</li> <li>Delete request (with confirmation modal) under cursor in tree with Backspace.</li> <li>\"Quick\" delete request (without confirmation modal) under cursor in tree with Shift+Backspace.</li> <li>\"Quit Posting\" added to command palette.</li> <li>Move the sidebar to the right or left using <code>collection_browser.position: 'right' | 'left'</code> config.</li> <li>Refinements to \"galaxy\" theme.</li> <li>\"galaxy\" theme is now default.</li> <li>Help text added to \"empty state\" in the collection browser.</li> <li>Extend info in the \"Collection Browser\" help modal.</li> <li>Visual indicator (a red bar on the left) on Input fields that contain invalid values.</li> <li>Toast message now appears when trying to submit the 'new request' modal with invalid values.</li> <li>Public roadmap (initial brain-dump version).</li> </ul>"},{"location":"CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>Ensure the location of the request on disk in the <code>Info</code> tab wraps instead of clipping out of view.</li> <li>Inserting requests in sorted position on creation.</li> <li>Prevent creating requests with no name.</li> <li>Prevent writing paths in the file-name field in the new request modal.</li> <li>Prevent specifying paths outside of the open collection dir in the directory field in the new request modal.</li> <li>Fix variables not being substituted into several fields, including auth.</li> </ul>"},{"location":"CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>Upgrade to Textual version 0.76.0</li> <li>Change logic to render bindings in help modal to reflect new Textual API.</li> <li>Sort order of requests in the tree improved.</li> </ul> <p>Note</p> <p>Changes prior to 1.11.0 are not documented here. Please see the Releases page on GitHub for information on changes prior to 1.11.0.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#using-posting","title":"Using Posting","text":""},{"location":"faq/#how-do-i-edit-headers-or-query-parameters","title":"How do I edit headers or query parameters?","text":"<p>Right now, you need to delete the row and re-create it with the correct values. Inline editing is planned, but not yet implemented.</p>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#how-do-i-suggest-a-feature","title":"How do I suggest a feature?","text":"<p>You can suggest a feature by opening a Discussion on the GitHub repository under the \"Ideas\" category.</p>"},{"location":"faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<p>You can report a bug by opening an Issue on the GitHub repository.</p>"},{"location":"faq/#how-do-i-contribute-code-to-posting","title":"How do I contribute code to Posting?","text":"<p>You can contribute code to Posting by opening a Pull Request on the GitHub repository.</p> <p>However, reporting bugs and suggesting features is also a great way to contribute!</p> <p>A guide to contributing is coming soon.</p>"},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#how-was-posting-built","title":"How was Posting built?","text":"<p>Posting is built using Textual, a Python framework for building terminal-based applications.</p>"},{"location":"faq/#who-is-the-original-creator-of-posting","title":"Who is the original creator of Posting?","text":"<p>Posting was originally created by Darren Burns, an open-source developer from Scotland, UK.</p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#about-this-document","title":"About this document","text":"<p>If you have any feedback or suggestions, please open a new discussion on GitHub. This roadmap is driven by community requests, so please open a discussion if you'd like to see something added.</p>"},{"location":"roadmap/#next-planned-features","title":"Next planned features \ud83d\ude80","text":"<p>Features planned to be worked on next.</p> <ul> <li>Documentation on using 3rd party libraries in scripts Documentation</li> <li>Transparent background support (experimentation) UI</li> <li>In-app information about headers Documentation</li> <li>A better footer UX UI</li> <li>The footer currently contains too many bindings. There should be a way to show that it is scrollable, possibly showing grouping of keybindings.</li> </ul>"},{"location":"roadmap/#longer-term","title":"Longer Term \ud83d\udd2e","text":"<p>Features that are planned for future development but are not immediate priorities.</p> <ul> <li>Directional navigation UI UX</li> <li>Jump mode 2-stage jump - if you press shift+[jump target key], then it'll jump to the target and then show a secondary overlay of available targets within that section UX</li> <li>Manually resize sections (sidebar, request, response) UI</li> <li>Searching in responses (this will likely be simpler with upcoming Textual changes) Requests</li> <li>File watcher so that if the request changes on disk then the UI updates to reflect it Requests</li> <li>Translating to other languages Documentation<ul> <li>I'd like to support e.g. Chinese, but need to investigate how that would render with double width characters in the terminal.</li> </ul> </li> <li>Warning when switching request when there are unsaved changes UX</li> <li>Request tagging: the ability to add tags to requests, and filter by tag Requests</li> <li>Making it clear which HTTP headers are set automatically UX</li> <li>Collection switcher Collection</li> <li>Environment switcher Environment</li> <li>Viewing the currently loaded environment keys/values in a popup Environment</li> <li>Changing the environment at runtime via command palette Environment</li> <li>WebSocket and SSE support Realtime</li> <li>Quickly open MDN links for headers UI</li> <li>Add rotating logging Logging</li> <li>Variable completion autocompletion in TextAreas Environment</li> <li>Variable resolution highlighting in TextAreas Environment</li> <li>Status bar? Showing the currently selected env, collection, current path, whether there's unsaved changes, etc. UI</li> <li>Highlighting variables in tables to show if they've resolved or not Environment</li> <li>Create a <code>_template.posting.yaml</code> file for request templates Requests</li> <li>OAuth2 implementation (need to scope out what's involved) Auth</li> <li>Adding test framework Testing</li> <li>Uploading files Requests</li> <li>Cookie editor Requests</li> <li>Import from Postman (PR is open, needs further work) Import</li> </ul>"},{"location":"roadmap/#completed","title":"Completed \u2713","text":"<p>Features that have been implemented and are available in the latest version.</p> <ul> <li>Path parameters Requests</li> <li>Adjustable padding in UI via config file UI</li> <li>Don't require user to type <code>http://</code> or <code>https://</code> in URL field UX</li> <li>Documentation on changing the UI at runtime (e.g. showing/hiding sections, etc.) Documentation</li> <li>Editing key/value editor rows without having to delete/re-add them UX</li> <li>Keymaps UI</li> <li>Pre-request and post-response scripts Scripting</li> <li>Parse cURL commands Import</li> <li>Watching environment files for changes &amp; updating the UI Environment</li> <li>Bearer token auth Auth</li> <li>Add \"quit\" to command palette and footer UX</li> <li>More user friendly errors UX</li> <li>Duplicate request from the tree Collection</li> <li>Quickly duplicate request from the tree Collection</li> <li>Colour-coding for request types (i.e. GET is green, POST is blue, etc.) UI</li> <li>Delete request from the tree Collection</li> <li>Inserting into the collection tree in sorted order, not at the bottom Collection</li> <li>External documentation Documentation</li> <li>Enabling and disabling rows in tables UX</li> <li>Custom themes, loaded from theme directory UI</li> <li>Dynamic in-app help system Documentation</li> <li>Specify certificate path via config or CLI Security</li> </ul>"},{"location":"roadmap/#legend","title":"Legend","text":"<p>The following tags are used to categorize features:</p> User Interface improvements UI Collection management Collection Environment handling Environment Authentication methods Auth Import capabilities Import Scripting capabilities Scripting Documentation Documentation User Experience UX Requests Requests Testing capabilities Testing Security features Security Logging capabilities Logging"},{"location":"guide/","title":"Getting Started","text":"<p>Posting can be installed in a matter of seconds on MacOS, Linux, and Windows.</p>"},{"location":"guide/#installation","title":"Installation","text":"<p>The recommended method is to use uv, which is a single Rust binary that you can use to install Python apps. It's significantly faster than alternative tools, and will get you up and running with Posting in seconds.</p> <p>You don't even need to worry about installing Python yourself - <code>uv</code> will manage everything for you.</p>"},{"location":"guide/#uv","title":"uv","text":"<p>Here's how to install Posting using <code>uv</code>:</p> <pre><code># quick install on MacOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# install Posting (will also quickly install Python 3.12 if needed)\nuv tool install --python 3.12 posting\n\n# Run posting\nposting\n</code></pre> <p><code>uv</code> can also be installed via Homebrew, Cargo, Winget, pipx, and more. See the installation guide for more information.</p> <p><code>uv</code> also makes it easy to install additional Python packages into your Posting environment, which you can then use in your pre-request/post-response scripts.</p>"},{"location":"guide/#pipx","title":"pipx","text":"<p>If you prefer, you can install Posting via <code>pipx</code>.</p> <pre><code>pipx install posting\n</code></pre> <p>The methods above will both install Posting globally, in an isolated environment. Do not attempt to install Posting with <code>pip</code>.</p> Homebrew is not supported <p>Installing via Homebrew is not supported, as some of Posting's Rust and C dependencies can take over 10 minutes to compile. When using uv, installation time is measured in milliseconds, and with pipx it's just a few seconds.</p>"},{"location":"guide/#choose-your-preferred-ui-style","title":"Choose your preferred UI style","text":"<p>Posting comes with two different \"spacing\" modes: <code>compact</code> and <code>standard</code>.</p> <p>The default is <code>standard</code> which includes extra padding and borders around content. <code>compact</code> mode removes the padding and borders, and uses a more compact layout.</p> <p>You can toggle the spacing mode using the <code>spacing</code> command from the command palette (Ctrl+P then type <code>spacing</code>, then press Enter). From this command palette, you can also try out different themes.</p> <p>To permanently change the spacing mode and/or theme, open the config file (<code>posting locate config</code> will tell you where it is) and add the following line(s):</p> <pre><code>spacing: compact\ntheme: &lt;theme-name&gt;\n</code></pre>"},{"location":"guide/#a-quick-introduction","title":"A quick introduction","text":"<p>This introduction will show you how to create a simple POST request to the JSONPlaceholder mock API to create a new user. It focuses on an efficient keyboard-driven workflow, but you can also use the mouse if you prefer.</p>"},{"location":"guide/#collections-and-requests","title":"Collections and requests","text":"<p>A collection is simply a directory which may contain requests saved by Posting.</p> <p>If you launch Posting without specifying a collection, any requests you create will be saved to the <code>\"default\"</code> collection.</p> <p>The default collection is a directory reserved by Posting on your filesystem. It's a \"global\" collection and is not related to the directory you launched Posting from.</p> <p>This is fine for quick throwaway requests, but you'll probably want to create a new collection for each project you work on so that you can check it into version control.</p> <p>To create a new collection, simply create a new directory and pass it into Posting.</p> <pre><code>mkdir my-collection\nposting --collection my-collection\n</code></pre> <p>Now, any requests you create will be saved in the <code>my-collection</code> directory as simple YAML files with the <code>.posting.yaml</code> extension.</p> <p>When Posting opens, you'll see the collection browser on the left side of the screen with <code>my-collection</code> displayed at the bottom right corner.</p>"},{"location":"guide/#setting-the-request-method-to-post","title":"Setting the request method to POST","text":"<p>When you launch Posting, no request is open, so the UI will look rather empty.</p> <p>Let's create a simple POST request to the JSONPlaceholder mock API to create a new user.</p> <p>Press Ctrl+T to open the request method dropdown:</p> <p></p> <p>The underlined character in each method indicates the key you can press to quickly select that method. We want to send a POST request, so press P to quickly select the POST method.</p>"},{"location":"guide/#setting-the-request-url","title":"Setting the request URL","text":"<p>You can move focus forward and backward through widgets using Tab and Shift+Tab respectively. So, you can move focus from the method selector to the URL bar by pressing Tab once.</p> <p>Alternatively, you can immediately move the focus to the URL bar from anywhere in Posting using Ctrl+L.</p> <p>Type <code>https://jsonplaceholder.typicode.com/users</code> into the URL bar.</p> <p></p> <p>Posting's URL bar highlights parts of the URL as you type, which can be helpful for spotting typos.</p> <p>It can also autocomplete domains you've previously used, to save you from having to retype them. For example, if you later want to make a request to <code>https://jsonplaceholder.typicode.com/posts</code>, you can simply type \"json\" into the URL bar and select the URL from the autocomplete menu that appears.</p> <p></p>"},{"location":"guide/#adding-a-json-body","title":"Adding a JSON body","text":"<p>Press Ctrl+O to enter \"jump mode\", then press W to quickly jump to the \"Body\" tab. Jump mode is great for quickly moving through the UI without having to press Tab multiple times.</p> <p>At this point focus is currently on the tab bar itself. Press J (or Down) to move the cursor down to the dropdown. Press Enter to open it, then select the option <code>Raw (json, text, etc.)</code>.</p> <p>Move down to the text area below using J (or Down), and type (or paste) the JSON below. </p> <pre><code>{\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre> <p>Note at the bottom right of the text area, JSON is pre-selected as the content type. This means Posting will automatically use JSON syntax highlighting and it will insert the <code>Content-Type: application/json</code> header for you when the request is sent.</p>"},{"location":"guide/#viewing-keyboard-shortcuts","title":"Viewing keyboard shortcuts","text":"<p>Now is probably a good time to note that you can see the full list of keyboard shortcuts for the focused widget by pressing F1. The text area widget in particular has a lot of useful shortcuts and supports things like undo/redo.</p> <p>Changing keyboard shortcuts</p> <p>You can remap keybindings in Posting using Keymaps.</p>"},{"location":"guide/#sending-the-request","title":"Sending the request","text":"<p>Press Ctrl+J to send the request. This shortcut works globally.</p> <p>Keyboard shortcuts</p> <p>You may also be able to send the request using Alt+Enter. This only works on terminals that support the Kitty keyboard protocol.</p>"},{"location":"guide/#working-with-the-response","title":"Working with the response","text":"<p>The response will be displayed in the main body of the UI. Press Ctrl+O to enter \"jump mode\", and the A to move to the response <code>Body</code> tab.</p> <p>Press J or Down to move the cursor down into the response body. This text area supports a bunch of different keyboard shortcuts for quickly navigating the response body. Text can be selected by holding Shift and moving the cursor using the arrow keys (or <code>hjkl</code> keys for Vim fans). You can also select text by clicking and dragging with the mouse.</p> <p>Press Y or C to copy the selected text to your clipboard. If no text is selected, the entire response body will be copied.</p> <p>Vim keys</p> <p>The response text area supports some Vim-inspired keyboard shortcuts.</p> <ul> <li>To select text without holding Shift, you can press V to enter visual mode, and use <code>hjkl</code> to navigate.</li> <li>If your cursor is at a bracket, you can press ++%++ to jump to the matching bracket.</li> <li>Press W to move the cursor to the next word, and B to move the cursor to the previous word.</li> </ul> <p>Try experimenting to find out what's supported, and if you're desperately missing something, please start a discussion on GitHub Discussions.</p> <p>You can open the response using the command defined in your <code>$EDITOR</code>, <code>$POSTING_EDITOR</code>, <code>$POSTING_PAGER</code>, or <code>$POSTING_PAGER_JSON</code> environment variables. For example, if you set <code>$POSTING_PAGER_JSON</code> to <code>fx</code>, then press the corresponding keybind to open the pager when the response text area has focus, the response will be opened in the <code>fx</code> JSON viewer.</p>"},{"location":"guide/#saving-the-request","title":"Saving the request","text":"<p>Finally, press Ctrl+S to save the request to disk. Fill out the form on the modal that appears, and press Enter or Ctrl+N to write the request to disk.</p> <p>Folders</p> <p>Requests can be saved to folders - simply include a <code>/</code> in the <code>Path in collection</code> field when you save the request, and Posting will create the required directory structure for you.</p>"},{"location":"guide/collections/","title":"Collections","text":""},{"location":"guide/collections/#overview","title":"Overview","text":"<p>A collection is just a directory on your file system which may or may not contain requests in the <code>.posting.yaml</code> format.</p> <p>There's absolutely nothing special about a collection. It contains no \"special files\" or metadata -- it's just a directory. It could even be empty. \"Collection\" is simply the name we give to the directory which we've loaded into Posting.</p>"},{"location":"guide/collections/#the-collection-browser","title":"The collection browser","text":"<p>Posting displays the currently open collection in the sidebar. This is called the collection browser.</p> <p></p> <p>The name of the currently open collection is displayed in the bottom right corner of the collection browser. In the example above, the collection is named \"sample-collection\".</p> <p>You can navigate this sidebar using the keyboard or mouse. Open a request by clicking on it or pressing Enter while it has focus, and it'll be loaded into the main body of the UI. A marker will also appear to the left of the request's title, indicating that the request is open. A save operation will overwrite the currently open request.</p> <p>Keyboard shortcuts</p> <p>The collection browser supports various keyboard shortcuts for quick navigation. For example Shift+J and Shift+K can be used to jump through sub-collections. Press F1 while the browser has focus to view the full list of shortcuts.</p> <p>The collection browser can be moved to the left or right side of the screen by setting the <code>collection_browser.position</code> configuration option to either <code>\"left\"</code> or <code>\"right\"</code>.</p>"},{"location":"guide/collections/#the-default-collection","title":"The default collection","text":"<p>If you launch Posting without a <code>--collection</code> argument, it will load the default collection, which is stored in Posting's reserved data directory on your file system.</p> <p>The default collection can be thought of as a system wide collection. It's a place to keep useful requests that you can easily access from anywhere, without having to manually specify a <code>--collection</code> argument.</p> <p>You can check where this is by running <code>posting locate collection</code>. The default collection is named \"default\", that name will be displayed in the bottom right corner of the collection browser.</p> <p></p> <p>This is useful to get started quickly, but you'll probably want to create your own collection directory and load it instead. This makes it easier to organize your requests and check them into version control.</p>"},{"location":"guide/collections/#creating-a-collection","title":"Creating a collection","text":"<p>A collection is just a directory, so you can create a collection by simply creating an empty directory anywhere on your file system.</p> <p>With the directory created, it's time to load it into Posting...</p>"},{"location":"guide/collections/#loading-a-collection","title":"Loading a collection","text":"<p>If you want to load a collection, you can do so by passing the path to the collection directory to Posting:</p> <pre><code>posting --collection path/to/collection\n</code></pre>"},{"location":"guide/collections/#example","title":"Example","text":"<p>To open a collection (a directory containing requests), use the <code>--collection</code> option:</p> <pre><code>posting --collection path/to/collection\n</code></pre> <p>This will recursively find and display requests in the sidebar. If you don't supply a directory, Posting will use the default collection directory. You can check where the default collection is by running <code>posting locate collection</code>.</p>"},{"location":"guide/command_palette/","title":"Command Palette","text":""},{"location":"guide/command_palette/#overview","title":"Overview","text":"<p>The command palette is a way to search for and execute commands in Posting.</p> <p>Some functionality in Posting can only be accessed through the command palette.</p> <p>It can be used to switch themes, show/hide parts of the UI, and more.</p>"},{"location":"guide/command_palette/#using-the-command-palette","title":"Using the command palette","text":"<p>Press Ctrl+P to open the command palette.</p>"},{"location":"guide/configuration/","title":"Configuration","text":""},{"location":"guide/configuration/#overview","title":"Overview","text":"<p>Posting can be configured using a configuration file, environment variables, and/or <code>.env</code> files.</p> <p>Configuration values are loaded in the following order of precedence (highest to lowest):</p> <ol> <li>Configuration file</li> <li>Environment variables</li> <li><code>.env</code> files</li> </ol>"},{"location":"guide/configuration/#configuration-file","title":"Configuration file","text":"<p>You can write configuration for Posting using YAML.</p> <p>The location of the config file can be checked using the command <code>posting locate config</code>.</p> <p>Here's an example configuration file:</p> <pre><code>theme: galaxy\nlayout: horizontal\nresponse:\n  prettify_json: false\nheading:\n  visible: true\n  show_host: false\n</code></pre>"},{"location":"guide/configuration/#environment-variables","title":"Environment variables","text":"<p>All configuration values can also be set as environment variables.</p> <p>Simply prefix the name of the config with <code>POSTING_</code> and set it as an environment variable.</p> <p>For nested configuration values, use <code>__</code> as the delimiter. So to set <code>heading.visible</code> to <code>false</code>, you can set the environment variable <code>POSTING_HEADING__VISIBLE=false</code>.</p> <p>For example, to set the theme to <code>galaxy</code>, you can set the environment variable <code>POSTING_THEME=galaxy</code>.</p>"},{"location":"guide/configuration/#dotenv-env-files","title":"dotenv (<code>.env</code>) files","text":"<p>Posting also supports <code>.env</code> (dotenv) files, which are useful if you want to swap out environment variable values depending on the environment you're working in (for example, \"dev\" vs \"prod\").</p> <p>You can tell Posting to use a <code>.env</code> file using the <code>--env</code> option. This option can be supplied multiple times to load multiple <code>.env</code> files.</p> <p>Here's an example <code>.env</code> file:</p> <pre><code>POSTING_THEME=\"cobalt\"\nPOSTING_LAYOUT=\"vertical\"\nPOSTING_HEADING__VISIBLE=\"false\"\n</code></pre> <p>Dotenv files are separate from collections, although you may wish to include them inside a collection to make it easy to version and share with others.</p>"},{"location":"guide/configuration/#configuring-ssl","title":"Configuring SSL","text":"<p>Posting verifies SSL certificates by default using the CA bundle provided by the <code>certifi</code> package.</p>"},{"location":"guide/configuration/#ssl-certificate-configuration","title":"SSL certificate configuration","text":"<p>Posting can load custom CA bundles from a <code>.pem</code> file.</p> <p>The easiest way to do this is in your <code>config.yaml</code> file:</p> <pre><code>ssl:\n  ca_bundle: 'absolute/path/to/certificate.pem'\n</code></pre>"},{"location":"guide/configuration/#environment-specific-certificates","title":"Environment-specific certificates","text":"<p>If the required CA bundle differs per environment, you can again use the principle that all configuration can be set as environment variables which can optionally be set and loaded using <code>--env</code> and <code>.env</code> files:</p> <pre><code># dev.env\nPOSTING_SSL__CA_BUNDLE='/path/to/certificate.pem'\n</code></pre> <p>Now load the <code>dev.env</code> file when working in the <code>dev</code> environment to ensure the dev environment CA bundle is used:</p> <pre><code>posting --env dev.env\n</code></pre>"},{"location":"guide/configuration/#disabling-ssl-verification","title":"Disabling SSL verification","text":"<p>SSL verification can be disabled on a per-request basis in the \"Options\" tab.</p>"},{"location":"guide/configuration/#client-side-certificates","title":"Client-side certificates","text":"<p>You can specify local certificates to use as a client-side certificate:</p> <pre><code>ssl:\n  certificate_path: /path/to/certificate.pem\n  key_file: /path/to/key.key  # optional\n  password: '***********'  # optional password for key_file\n</code></pre>"},{"location":"guide/configuration/#full-configuration-reference","title":"Full configuration reference","text":"<p>The table below lists all available configuration options and their environment variable equivalents, their default values, and descriptions.</p> Config Key (Env Var) Values (Default) Description <code>theme</code> (<code>POSTING_THEME</code>) See the list of themes in the command palette (Default: <code>\"galaxy\"</code>) Sets the theme of the application. <code>load_user_themes</code> (<code>POSTING_LOAD_USER_THEMES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, load user themes from the theme directory, allowing them to be specified in config and selected via the command palette. <code>load_builtin_themes</code> (<code>POSTING_LOAD_BUILTIN_THEMES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, load builtin themes, allowing them to be specified in config and selected via the command palette. <code>theme_directory</code> (<code>POSTING_THEME_DIRECTORY</code>) (Default: <code>${XDG_DATA_HOME}/posting/themes</code>) The directory containing user themes. <code>layout</code> (<code>POSTING_LAYOUT</code>) <code>\"vertical\"</code>, <code>\"horizontal\"</code> (Default: <code>\"horizontal\"</code>) Sets the layout of the application. <code>use_host_environment</code> (<code>POSTING_USE_HOST_ENVIRONMENT</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) Allow/deny using environment variables from the host machine as variables in requests (using the standard <code>$</code> syntax). When disabled, only variables defined explicitly in <code>.env</code> files will be available for use. <code>watch_env_files</code> (<code>POSTING_WATCH_ENV_FILES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, automatically reload environment files when they change. <code>watch_themes</code> (<code>POSTING_WATCH_THEMES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, automatically reload themes in the theme directory when they change on disk. <code>watch_collection_files</code> (<code>POSTING_WATCH_COLLECTION_FILES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, automatically reload collection files when they change on disk. Right now, this is limited to reloading Python scripts in the collection. <code>animation</code> (<code>POSTING_ANIMATION</code>) <code>\"none\"</code>, <code>\"basic\"</code>, <code>\"full\"</code> (Default: <code>\"none\"</code>) Controls the animation level. <code>response.prettify_json</code> (<code>POSTING_RESPONSE__PRETTIFY_JSON</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, JSON responses will be pretty-formatted. <code>response.show_size_and_time</code> (<code>POSTING_RESPONSE__SHOW_SIZE_AND_TIME</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, the size and time taken for the response will be displayed in the response area border subtitle. <code>heading.visible</code> (<code>POSTING_HEADING__VISIBLE</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the app header. <code>heading.show_host</code> (<code>POSTING_HEADING__SHOW_HOST</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the hostname in the app header. <code>heading.show_version</code> (<code>POSTING_HEADING__SHOW_VERSION</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the version in the app header. <code>heading.hostname</code> (<code>POSTING_HEADING__HOSTNAME</code>) (Default: <code>unset</code>) The hostname to display in the app header. You may use Rich markup here. If unset, the hostname provided via <code>socket.gethostname()</code> will be used. <code>url_bar.show_value_preview</code> (<code>POSTING_URL_BAR__SHOW_VALUE_PREVIEW</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the variable value preview below the URL bar. <code>url_bar.hide_secrets_in_value_preview</code> (<code>POSTING_URL_BAR__HIDE_SECRETS_IN_VALUE_PREVIEW</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, values will be redacted in the value preview when the variable name contains the word <code>secret</code> or <code>key</code> or <code>password</code> or <code>token</code>. <code>collection_browser.position</code> (<code>POSTING_COLLECTION_BROWSER__POSITION</code>) <code>\"left\"</code>, <code>\"right\"</code> (Default: <code>\"left\"</code>) The position of the collection browser on screen. <code>collection_browser.show_on_startup</code> (<code>POSTING_COLLECTION_BROWSER__SHOW_ON_STARTUP</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the collection browser on startup. Can always be toggled using the command palette. <code>pager</code> (<code>POSTING_PAGER</code>) (Default: <code>$PAGER</code>) Command to use for paging text. <code>pager_json</code> (<code>POSTING_PAGER_JSON</code>) (Default: <code>$PAGER</code>) Command to use for paging JSON. <code>editor</code> (<code>POSTING_EDITOR</code>) (Default: <code>$EDITOR</code>) Command to use for opening files in an external editor. <code>ssl.ca_bundle</code> (<code>POSTING_SSL__CA_BUNDLE</code>) Absolute path (Default: <code>unset</code>) Absolute path to a CA bundle file/dir. If not set, the Certifi CA bundle will be used. <code>ssl.certificate_path</code> (<code>POSTING_SSL__CERTIFICATE_PATH</code>) Absolute path (Default: <code>unset</code>) Absolute path to a client SSL certificate file or directory. <code>ssl.key_file</code> (<code>POSTING_SSL__KEY_FILE</code>) Absolute path (Default: <code>unset</code>) Absolute path to a client SSL key file. <code>ssl.password</code> (<code>POSTING_SSL__PASSWORD</code>) Password for the key file. (Default: <code>unset</code>) Password to decrypt the key file if it's encrypted. <code>focus.on_startup</code> (<code>POSTING_FOCUS__ON_STARTUP</code>) <code>\"url\"</code>, <code>\"method\", \"collection\"</code> (Default: <code>\"url\"</code>) Automatically focus the URL bar, method, or collection browser when the app starts. <code>focus.on_response</code> (<code>POSTING_FOCUS__ON_RESPONSE</code>) <code>\"body\"</code>, <code>\"tabs\"</code> (Default: <code>unset</code>) Automatically focus the response tabs or response body text area when a response is received. <code>focus.on_request_open</code> (<code>POSTING_FOCUS__ON_REQUEST_OPEN</code>) <code>\"headers\"</code>, <code>\"body\"</code>, <code>\"query\"</code>, <code>\"info\"</code>, <code>\"url\"</code>, <code>\"method\"</code> (Default: <code>unset</code>) Automatically focus the specified target when a request is opened from the collection browser. <code>text_input.blinking_cursor</code> (<code>POSTING_TEXT_INPUT__BLINKING_CURSOR</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, the cursor will blink in input widgets and text area widgets. <code>command_palette.theme_preview</code> (<code>POSTING_COMMAND_PALETTE__THEME_PREVIEW</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) If enabled, the command palette will display a preview of the selected theme when the cursor is over it. This will slow down cursor movement and so is disabled by default. <code>use_xresources</code> (<code>POSTING_USE_XRESOURCES</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) Try to create themes called <code>xresources-dark</code> and <code>xresources-light</code> (see the section below) <code>curl_export_extra_args</code> (<code>POSTING_CURL_EXPORT_EXTRA_ARGS</code>) (Default: <code>\"\"</code>) Extra arguments to pass to curl when exporting a request as a curl command. This string will be inserted directly into the command that gets copied to your clipboard, immediately after <code>curl</code>."},{"location":"guide/environments/","title":"Environments","text":""},{"location":"guide/environments/#overview","title":"Overview","text":"<p>You can use variables in input fields and text areas using the <code>${VARIABLE_NAME}</code> or <code>$VARIABLE_NAME</code> syntax. These variables will be substituted into outgoing requests.</p> <p> </p>"},{"location":"guide/environments/#loading-variables","title":"Loading variables","text":"<p>Variables are stored in <code>.env</code> files, and loaded using the <code>--env</code> option.</p> <p>Here's what a <code>.env</code> file might look like:</p> <pre><code># file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n</code></pre> <p>To make these variables available in the UI, you can load them using the <code>--env</code> option:</p> <pre><code>posting --env dev.env\n</code></pre> <p>You can load multiple <code>.env</code> files by specifying the <code>--env</code> option multiple times:</p> <pre><code>posting --env dev.env --env shared.env\n</code></pre> <p>This allows you to build up a set of variables which are common to all environments, and then override them for specific environments.</p>"},{"location":"guide/environments/#autoloading-env-files","title":"Autoloading <code>.env</code> files","text":"<p>If no <code>--env</code> options are provided, Posting will automatically load a <code>posting.env</code> file in the current working directory if it exists.</p>"},{"location":"guide/environments/#using-environment-variables","title":"Using environment variables","text":"<p>By default, Posting will only use variables defined in <code>.env</code> files that have been explicitly loaded using the <code>--env</code> option.</p> <p>If you want to permit using environment variables that exist on the host machine (i.e. those which are not defined in any <code>.env</code> files), you must set the <code>use_host_environment</code> config option to <code>true</code> (or set the environment variable <code>POSTING_USE_HOST_ENVIRONMENT=true</code>).</p>"},{"location":"guide/environments/#practical-example","title":"Practical example","text":"<p>Imagine you're testing an API which exists in both <code>dev</code> and <code>prod</code> environments.</p> <p>The <code>dev</code> and <code>prod</code> environments share some common variables, but differ in many ways too. We can model this by having a single <code>shared.env</code> file which contains variables which are shared between environments, and then a <code>dev.env</code> and <code>prod.env</code> file which contain environment specific variables.</p> <pre><code># file: shared.env\nAPI_PATH=\"/api/v1\"\nENV_NAME=\"shared\"\n\n# file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n\n# file: prod.env\nAPI_KEY=\"prod-api-key\"\nENV_NAME=\"prod\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n</code></pre> <p>When working in the <code>dev</code> environment, you can then load all of the shared variables and all of the development environment specific variables using the <code>--env</code> option:</p> <pre><code>posting --env shared.env --env dev.env\n</code></pre> <p>This will load all of the shared variables from <code>shared.env</code>, and then load the variables from <code>dev.env</code>. Since <code>ENV_NAME</code> appears in both files, the value from the <code>dev.env</code> file will be used since that was the last one specified.</p> <p>Note that you do not need to restart to load changes made to these files, so you can open and edit your env files in an editor of your choice alongside Posting.</p>"},{"location":"guide/environments/#environment-specific-config","title":"Environment specific config","text":"<p>Since all Posting configuration options can also be specified as environment variables, we can also put environment specific config inside <code>.env</code> files. There's a dedicated \"Configuration\" section in this document which covers this in more detail.</p> <p>For example, if you wanted to use a light theme in the prod environment (as a subtle reminder that you're in production!), you could set the environment variable <code>POSTING_THEME=solarized-light</code> inside the <code>prod.env</code> file.</p> <p>Note that configuration files take precedence over environment variables, so if you set a value in both a <code>.env</code> file and a <code>config.yaml</code>, the value from the <code>config.yaml</code> file will be used.</p>"},{"location":"guide/external_tools/","title":"External Tools","text":""},{"location":"guide/external_tools/#overview","title":"Overview","text":"<p>You can quickly switch between Posting and external editors and pagers.</p> <p>For example, you could edit request bodies in <code>vim</code>, and then browse the JSON response body in <code>less</code> or <code>fx</code>.</p> <p>You can even configure a custom pager specifically for browsing JSON.</p>"},{"location":"guide/external_tools/#external-editors","title":"External Editors","text":"<p>With a multi-line text area focused, press F4 to open the file in your configured external editor.</p> <p>The configured external editor can be set as <code>editor</code> in your <code>config.yaml</code> file. For example:</p> config.yaml<pre><code>editor: vim\n</code></pre> <p>Alternatively, you can set the <code>POSTING_EDITOR</code> environment variable.</p> <pre><code>export POSTING_EDITOR=vim\n</code></pre> <p>If neither is set, Posting will try to use the <code>EDITOR</code> environment variable.</p> <p>Using VSCode or Cursor</p> <p>If you want to use VSCode or Cursor, you can set the <code>POSTING_EDITOR</code> environment variable to <code>code -w</code> or <code>cursor -w</code> respectively.</p>"},{"location":"guide/external_tools/#external-pagers","title":"External Pagers","text":"<p>With a multi-line text area focused, press F3 to open the file in your configured external pager.</p> <p>The configured external pager can be set as <code>pager</code> in your <code>config.yaml</code> file. For example:</p> config.yaml<pre><code>pager: less\n</code></pre> <p>Alternatively, you can set the <code>POSTING_PAGER</code> environment variable.</p> <pre><code>export POSTING_PAGER=less\n</code></pre>"},{"location":"guide/external_tools/#json-pager","title":"JSON Pager","text":"<p>You can use a custom pager for viewing JSON using the <code>pager_json</code> setting in your <code>config.yaml</code> file. For example:</p> config.yaml<pre><code>pager_json: fx\n</code></pre> <p>Alternatively, you can set the <code>POSTING_PAGER_JSON</code> environment variable.</p> <pre><code>export POSTING_PAGER_JSON=fx\n</code></pre> <p>If neither is set, Posting will try to use the default pager lookup rules discussed earlier.</p>"},{"location":"guide/external_tools/#exporting-to-curl","title":"Exporting to curl","text":"<p>Added in Posting 2.4.0</p> <p>Open the command palette and select <code>export: copy as curl</code>. This will transform the open request into a cURL command, and copy it to your clipboard.</p> <p></p> <p>You can optionally supply extra arguments to pass to curl by setting the <code>curl_export_extra_args</code> setting in your <code>config.yaml</code> file.</p> config.yaml<pre><code>curl_export_extra_args: \"--verbose -w %{time_total} %{http_code}\"\n</code></pre> <p>This will be inserted directly into the command that gets copied to your clipboard, immediately after <code>curl</code>, producing a command like the following:</p> <pre><code>curl --verbose -w %{time_total} %{http_code} -X POST ...\n</code></pre>"},{"location":"guide/help_system/","title":"Help System","text":""},{"location":"guide/help_system/#overview","title":"Overview","text":"<p>Posting has a built-in help system, which can be used to get information about the currently focused widget.</p>"},{"location":"guide/help_system/#getting-help-for-the-focused-widget","title":"Getting help for the focused widget","text":"<p>With a widget focused, press <code>f1</code> to open a help window for that widget.</p> <p></p> <p>Most widgets offer more keybindings and functionality than meets the eye, and more than what is shown in the application footer.</p> <p>The help window explains how to use the focused widget, and lists all of the keybindings offered by it.</p>"},{"location":"guide/importing/","title":"Importing","text":""},{"location":"guide/importing/#overview","title":"Overview","text":"<p>Posting supports importing from external sources.</p>"},{"location":"guide/importing/#importing-from-curl","title":"Importing from curl","text":"<p>This feature is experimental.</p> <p>You can import a curl command by pasting it into the URL bar.</p> <p>This will fill out the request details in the UI based on the curl command you pasted, overwriting any existing values.</p>"},{"location":"guide/importing/#importing-from-openapi","title":"Importing from OpenAPI","text":"<p>This feature is experimental.</p> <p>Posting can convert OpenAPI 3.x specs into collections.</p> <p>To import an OpenAPI Specification, use the <code>posting import path/to/openapi.yaml</code> command.</p> <p>You can optionally supply an output directory.</p> <p>If no output directory is supplied, the default collection directory will be used.</p> <p>Posting will attempt to build a file structure in the collection that aligns with the URL structure of the imported API.</p>"},{"location":"guide/importing/#importing-from-postman","title":"Importing from Postman","text":"<p>This feature is experimental.</p> <p>Collections can be imported from Postman.</p> <p>To import a Postman collection, use the <code>posting import --type postman path/to/postman_collection.json</code> command.</p> <p>You can optionally supply an output directory with the <code>-o</code> option. If no output directory is supplied, the default collection directory will be used (check where this is using <code>posting locate collection</code>).</p> <p>Variables will also be imported from the Postman collection and placed in a <code>.env</code> file inside the collection directory.</p>"},{"location":"guide/keymap/","title":"Keymaps","text":""},{"location":"guide/keymap/#overview","title":"Overview","text":"<p>As explained in the Help System section, you can view the keybindings for any widget by pressing F1 or Ctrl+? when that widget has focus.</p> <p>If you wish to use different keybindings, you can do so by editing the <code>keymap</code> section of your <code>config.yaml</code> file. Check the location of that file on your system by running <code>posting locate config</code> on the command line.</p>"},{"location":"guide/keymap/#changing-the-keymap","title":"Changing the keymap","text":"<p>Actions in Posting have unique IDs which map to a keybinding (listed at the bottom of this page). For any of these IDs, you can change the keybinding by adding an entry to the <code>keymap</code> section of your <code>config.yaml</code> file:</p> <pre><code>keymap:\n  &lt;ID&gt;: &lt;key-combination&gt;\n</code></pre> <p>Here's an example of changing the keybinding for the \"Send Request\" action:</p> <pre><code>keymap:\n  send-request: ctrl+r\n</code></pre> <p>After adding the above entry to <code>config.yaml</code> and restarting Posting, you'll notice that that the footer of the app now shows <code>^r</code> to send a request rather than the default <code>^j</code>.</p> <p>Now you can press <code>^r</code> to send a request instead of <code>^j</code>.</p> <p>You can also have multiple keys map to the same action by separating them with commas:</p> <pre><code>keymap:\n  send-request: ctrl+r,ctrl+i\n</code></pre> <p>Note that by adding an entry to the <code>keymap</code> you are overriding the default keybinding for that action, so if you wish to keep the default keybinding, you'll need to specify it again:</p> <pre><code>keymap:\n  send-request: ctrl+r,ctrl+i,ctrl+j\n</code></pre>"},{"location":"guide/keymap/#key-format","title":"Key format","text":"<p>Support for keys in the terminal varies between terminals, multiplexers and operating systems. It's a complex topic, and one that may involve some trial and error. Some keys might be intercepted before reaching Posting, and your emulator might not support certain keys.</p> <ul> <li>To specify Ctrl+X, use <code>ctrl+x</code>.</li> <li>To specify Ctrl+Shift+X, use <code>ctrl+X</code> (control plus uppercase \"X\").</li> <li>To specify multiple keys, separate them with commas: <code>ctrl+shift+left,ctrl+y</code>.</li> <li>To specify a function key, use <code>f&lt;number&gt;</code>. For example, F1 would be <code>f1</code>.</li> <li>To specify <code>@</code> (at) use <code>at</code> (not e.g. Shift+2 as this only applies to some keyboard layouts).</li> <li>Arrow keys can be specified as <code>left</code>, <code>right</code>, <code>up</code> and <code>down</code>.</li> <li><code>shift</code> works as a modifier non-printable keys e.g. <code>shift+backspace</code>, <code>shift+enter</code>, <code>shift+right</code> are all acceptable. Support may vary depending on your emulator.</li> <li><code>alt</code> also works as a modifier e.g. <code>alt+enter</code>.</li> <li><code>ctrl+enter</code>, <code>alt+enter</code>,<code>ctrl+backspace</code>, <code>ctrl+shift+enter</code>, <code>ctrl+shift+space</code> etc. are supported if your terminal supports the Kitty keyboard protocol.</li> <li>Other keys include (but are not limited to) <code>comma</code>, <code>full_stop</code>, <code>colon</code>, <code>semicolon</code>, <code>quotation_mark</code>, <code>apostrophe</code>, <code>left_bracket</code>, <code>right_square_bracket</code>, <code>left_square_bracket</code>, <code>backslash</code>, <code>vertical_line</code> (pipe |), <code>plus</code>, <code>minus</code>, <code>equals_sign</code>, <code>slash</code>, <code>asterisk</code>,<code>tilde</code>, <code>percent_sign</code>.</li> </ul> <p>The only way to know for sure which keys are supported in your particular terminal emulator is to install Textual, run <code>textual keys</code>, press the key you want to use, and look at the <code>key</code> field of the printed output.</p> <p>Work in progress</p> <p>In the future, I hope to make it easier to discover which keys are supported and when key presses they correspond to for a particular environment directly within Posting. This will likely take the form of a CLI command that outputs key names and their corresponding key presses. For now, if you need assistance, please open a discussion on GitHub.</p>"},{"location":"guide/keymap/#binding-ids","title":"Binding IDs","text":"<p>These are the IDs of the actions that you can change the keybinding for:</p> <ul> <li><code>send-request</code> - Send the current request. Default: <code>ctrl+j,alt+enter</code>.</li> <li><code>focus-method</code> - Focus the method selector. Default: <code>ctrl+t</code>.</li> <li><code>focus-url</code> - Focus the URL input. Default: <code>ctrl+l</code>.</li> <li><code>save-request</code> - Save the current request. Default: <code>ctrl+s</code>.</li> <li><code>expand-section</code> - Expand or shrink the section which has focus. Default: <code>ctrl+m</code>.</li> <li><code>toggle-collection</code> - Toggle the collection browser. Default: <code>ctrl+h</code>.</li> <li><code>new-request</code> - Create a new request. Default: <code>ctrl+n</code>.</li> <li><code>commands</code> - Open the command palette. Default: <code>ctrl+p</code>.</li> <li><code>help</code> - Open the help dialog for the currently focused widget. Default: <code>f1,ctrl+question_mark</code>.</li> <li><code>quit</code> - Quit the application. Default: <code>ctrl+c</code>.</li> <li><code>jump</code> - Enter jump mode. Default: <code>ctrl+o</code>.</li> <li><code>open-in-pager</code> - Open the content of the focused text area in your $PAGER/$POSTING_PAGER/$POSTING_PAGER_JSON. Default: <code>f3</code>.</li> <li><code>open-in-editor</code> - Open the content of the focused text area in your $EDITOR/$POSTING_EDITOR. Default: <code>f4</code>.</li> <li><code>search-requests</code> - Go to a request by name. Default: <code>ctrl+shift+p</code>.</li> </ul>"},{"location":"guide/navigation/","title":"Navigation","text":"<p>Posting can be navigated using either mouse or keyboard.</p>"},{"location":"guide/navigation/#jump-mode","title":"Jump mode","text":"<p>Jump mode is the fastest way to get around.</p> <p>Press ctrl+o to enter jump mode, followed by the key corresponding to the widget you want to switch focus to (jump to).</p> <p></p> <p>With the default layout, the positioning of keys on the overlays is similar to the positioning of the keys on a QWERTY keyboard.</p> <p>To exit jump mode, press esc.</p>"},{"location":"guide/navigation/#tab-navigation","title":"Tab navigation","text":"<p>tab and shift+tab will move focus between widgets, and j/k/up/down will move around within a widget.</p> <p>Some widgets have additional keybindings for navigation. You can check these by pressing f1 while it is focused.</p> <p>Where it makes sense, up and down will also move between widgets.</p>"},{"location":"guide/navigation/#mouse-navigation","title":"Mouse navigation","text":"<p>You can also navigate Posting entirely using the mouse, very much like a typical GUI application.</p> <p>If a widget shows a scrollbar, you can use the mouse wheel or trackpad gestures to scroll through its content. Scrollbars can also be clicked and dragged.</p> <p>If you hold shift and scroll using the trackpad or mousewheel, the content will scroll horizontally (if there's a horizontal scrollbar).</p>"},{"location":"guide/navigation/#searching-and-jumping-to-requests","title":"Searching and jumping to requests","text":"<p>Press ctrl+shift+p to open the fuzzy search popup (configurable using the <code>search-requests</code> keybinding, see keymap).</p> <p>Type the name of the request you want to jump to and press enter to open it.</p> <p></p>"},{"location":"guide/navigation/#contextual-help","title":"Contextual help","text":"<p>Many widgets have additional bindings for navigation other than those displayed in the footer. You can view the full list of keybindings for the currently focused widget, as well as additional usage information and tips, by pressing f1 or ctrl+? (or ctrl+shift+/).</p> <p></p>"},{"location":"guide/navigation/#automatic-focus-switching","title":"Automatic focus switching","text":"<p>You can use the <code>focus.on_startup</code> and <code>focus.on_response</code> configuration options to control which widget is focused when the app starts and when a response is received.</p> Config Default value Description <code>focus.on_startup</code> <code>\"url\"</code>, <code>\"method\", \"collection\"</code> (Default: <code>\"url\"</code>) Automatically focus the URL bar, method, or collection browser when the app starts. <code>focus.on_response</code> <code>\"body\"</code>, <code>\"tabs\"</code> (Default: <code>unset</code>) Automatically focus the response tabs or response body text area when a response is received. <code>focus.on_request_open</code> <code>\"headers\"</code>, <code>\"body\"</code>, <code>\"query\"</code>, <code>\"info\"</code>, <code>\"url\"</code>, <code>\"method\"</code> (Default: <code>unset</code>) Automatically focus the specified target when a request is opened from the collection browser."},{"location":"guide/navigation/#exiting","title":"Exiting","text":"<p>Quit Posting by pressing ctrl+c, or by opening the command palette and selecting \"Quit\".</p>"},{"location":"guide/requests/","title":"Requests","text":""},{"location":"guide/requests/#overview","title":"Overview","text":"<p>Requests are stored directly on your file system as simple YAML files, suffixed with <code>.posting.yaml</code> - easy to read, understand, and version control!</p>"},{"location":"guide/requests/#example","title":"Example","text":"<p>Here's an example of what a request file looks like:</p> <pre><code>name: Create user\ndescription: Adds a new user to the system.\nmethod: POST\nurl: https://jsonplaceholder.typicode.com/users\nbody: \n  content: |-\n    {\n      \"firstName\": \"John\",\n      \"email\": \"john.doe@example.com\"\n    }\nheaders:\n- name: Content-Type\n  value: application/json\nparams:\n- name: sendWelcomeEmail\n  value: 'true'\n</code></pre>"},{"location":"guide/requests/#creating-a-new-request","title":"Creating a new request","text":"<p>Press Ctrl+N to create a new request.</p> <p>You'll be prompted to supply a name for the request. By default, this name is used to generate the filename, but you can also choose your own filename if you wish.</p> <p>Tip</p> <p>If you already have a collection loaded, the path in the \"New Request\" dialog will be pre-filled based on the position of the cursor in the collection tree, so moving the cursor to the correct location before pressing Ctrl+N will save you from needing to type out the path.</p> <p>Within the \"Path in collection\" field of this dialog, it's important to note that <code>.</code> refers to the currently loaded collection directory (that is, the directory that was loaded using the <code>--collection</code> option), and not necessarily the current working directory.</p>"},{"location":"guide/requests/#duplicating-a-request","title":"Duplicating a request","text":"<p>With a the cursor over a request in the collection tree, press D to create a duplicate of that request. This will bring up a dialog allowing you to change the name and description of the request, or move it to another location.</p> <p>To skip the dialog and quickly duplicate the request, press Shift+D, creating it as a sibling of the original request. The file name of the new request will be generated automatically. You can always modify the name and description after it's created in the <code>Info</code> tab.</p>"},{"location":"guide/requests/#saving-a-request","title":"Saving a request","text":"<p>Press Ctrl+S to save the currently open request.</p> <p>If you haven't saved the request yet, a dialog will appear, prompting you to give the request a name, and to select a directory to save it in.</p> <p>Folders</p> <p>Requests can be saved to folders - simply include a <code>/</code> in the <code>Path in collection</code> field when you save the request, and Posting will create the required directory structure for you.</p> <p>If the request is already saved on disk, Ctrl+S will overwrite the previous version with your new changes.</p>"},{"location":"guide/requests/#loading-requests","title":"Loading requests","text":"<p>Requests are stored on your file system as simple YAML files, suffixed with <code>.posting.yaml</code>.</p> <p>A directory can be loaded into Posting using the <code>--collection</code> option, and all <code>.posting.yaml</code> files in that directory will be displayed in the sidebar.</p>"},{"location":"guide/requests/#path-parameters","title":"Path parameters","text":"<p>Path parameters let you insert placeholders directly in the URL path using <code>:name</code> syntax. For example:</p> <pre><code>https://api.example.com/users/:id/comments/:commentId\n</code></pre> <p>When you type placeholders like this in the URL bar, Posting automatically extracts them and shows them in the Path tab. You can edit the values there, but you cannot add or remove rows manually \u2014 the rows come from the URL. Values are substituted into the URL path when the request is sent.</p>"},{"location":"guide/requests/#useful-shortcuts","title":"Useful shortcuts","text":"<ul> <li>With the cursor over a <code>:name</code> token in the URL bar, press Alt+Down to jump to that row in the Path tab.</li> <li>With a row highlighted in the Path tab, press Alt+Down to jump to the corresponding token in the URL bar.</li> </ul>"},{"location":"guide/requests/#yaml-representation","title":"YAML representation","text":"<p>Path parameter values are saved in the request file under <code>path_params</code>:</p> <pre><code>name: get comments\nurl: https://jsonplaceholder.typicode.com/posts/:postId/comments\npath_params:\n- name: postId\n  value: '3'\n</code></pre> <p>You can also use variables from the environment in path parameter values (e.g., <code>$FOO</code>). Variables are resolved before the values are substituted into the URL.</p>"},{"location":"guide/requests/#escaping-literal-colons","title":"Escaping literal colons","text":"<p>If you need a literal <code>:name</code> in the path, escape it by doubling the colon. For example, <code>::id</code> renders as <code>:id</code> and is not treated as a placeholder:</p> <pre><code>http://example.com/users/::id/:id  \u2192  http://example.com/users/:id/123\n</code></pre>"},{"location":"guide/requests/#deleting-a-request","title":"Deleting a request","text":"<p>You can delete a request by moving the cursor over it in the tree, and pressing Backspace.</p>"},{"location":"guide/requests/#sharing-requests","title":"Sharing requests","text":"<p>An easy way to share a request with others is to copy it as a cURL command. Press Ctrl+P and select <code>export: copy as curl</code> to copy the request as a cURL command to your clipboard.</p> <p>You can also press Ctrl+P and select <code>export: copy as YAML</code> to copy the request as YAML. This provides a quick way to share a request with other Posting users, e.g. via Slack.</p>"},{"location":"guide/scripting/","title":"Scripting","text":""},{"location":"guide/scripting/#overview","title":"Overview","text":"<p>You can attach simple Python scripts to requests inside the <code>Scripts</code> tab, and have Posting run them at various stages of the request lifecycle. This powerful feature allows you to:</p> <ul> <li>Perform setup before a request (e.g. setting variables, preparing data)</li> <li>Set or modify headers, query parameters, and other request properties</li> <li>Print logs and messages</li> <li>Set variables to be used in later requests (e.g. authentication tokens)</li> <li>Inspect request and response objects, and manipulate them</li> <li>Pretty much anything else you can think of doing with Python!</li> </ul> <p></p>"},{"location":"guide/scripting/#script-types","title":"Script types","text":"<p>Posting supports three types of scripts, which run at different points in the request/response lifecycle:</p> <ol> <li>Setup Scripts: Runs before the request is constructed. This is useful for setting initial variables which may be substituted into the request.</li> <li>Pre-request Scripts: Runs after the request has been constructed and variables have been substituted, but before the request is sent. You can directly modify the request object here.</li> <li>Post-response Scripts: Runs after the response is received. This is useful for extracting data from the response, or for performing cleanup.</li> </ol>"},{"location":"guide/scripting/#writing-scripts","title":"Writing scripts","text":"<p>In the context of Posting, a \"script\" is a regular Python function.</p> <p>By default, if you specify a path to a Python file, Posting will look for and execute the following functions at the appropriate times:</p> <ul> <li><code>setup(posting: Posting) -&gt; None</code></li> <li><code>on_request(request: RequestModel, posting: Posting) -&gt; None</code></li> <li><code>on_response(response: httpx.Response, posting: Posting) -&gt; None</code></li> </ul> <p>However, you can have Posting call any function you wish using the syntax <code>path/to/script.py:function_to_run</code>.</p> <p>Note that relative paths are relative to the collection directory. This ensures that if you place scripts inside your collection directory, they're included when you share a collection with others.</p> <p>Note that you do not need to specify all of the arguments when writing these functions. Posting will only pass the number of arguments that you've specified when it calls your function. For example, you could define a your <code>on_request</code> function as <code>def on_request(request: RequestModel) -&gt; None</code> and Posting would call it with <code>on_request(request: RequestModel)</code> without passing the <code>posting</code> argument.</p>"},{"location":"guide/scripting/#editing-scripts","title":"Editing scripts","text":"<p>When you edit a script, it'll automatically be reloaded. This means you can keep Posting open while editing it.</p> <p>Posting also allows you to quickly jump to your editor (assuming you've set the <code>$EDITOR</code> or <code>$POSTING_EDITOR</code> environment variables) to edit a script. Press Ctrl+E while a script input field inside the <code>Scripts</code> tab is focused to open the path in your editor.</p> <p>Warning</p> <p>As of version 2.0.0, the script file must exist before pressing Ctrl+E. Posting will not create the file for you.</p>"},{"location":"guide/scripting/#script-logs","title":"Script logs","text":"<p>If your script writes to <code>stdout</code> or <code>stderr</code>, you'll see the output in the <code>Scripts</code> tab in the Response section. This output is not persisted on disk.</p>"},{"location":"guide/scripting/#example-setup-script","title":"Example: Setup script","text":"<p>The setup script is run before the request is built. You can set variables in the setup script that can be used in the request. For example, you could use <code>httpx</code> to fetch an access token, then set the token as a variable so that it may be substituted into the request.</p> <pre><code>def setup(posting: Posting) -&gt; None:\n    # Set a variable which may be used in this request\n    # (or other requests to follow)\n    posting.set_variable(\"auth_token\", \"1234567890\")\n</code></pre> <p>With this setup script attached to a request, you can then reference the <code>auth_token</code> variable in the request UI by typing <code>$auth_token</code>. The <code>$auth_token</code> variable will remain for the duration of the session, so you may wish to add a check to see if it has already been set in this session:</p> <pre><code>def setup(posting: Posting) -&gt; None:\n    if not posting.get_variable(\"auth_token\"):\n        posting.set_variable(\"auth_token\", \"1234567890\")\n</code></pre>"},{"location":"guide/scripting/#example-pre-request-script","title":"Example: Pre-request script","text":"<p>The pre-request script is run after the request has been constructed and variables have been substituted, right before the request is sent.</p> <p>You can directly modify the <code>RequestModel</code> object in this function, for example to set headers, query parameters, etc. The code snippet below shows some of the API.</p> <pre><code>from posting import Auth, Header, RequestModel, Posting\n\n\ndef on_request(request: RequestModel, posting: Posting) -&gt; None:\n    # Add a custom header to the request.\n    request.headers.append(Header(name=\"X-Custom-Header\", value=\"foo\"))\n\n    # Set auth on the request.\n    request.auth = Auth.basic_auth(\"username\", \"password\")\n    # request.auth = Auth.digest_auth(\"username\", \"password\")\n    # request.auth = Auth.bearer_token_auth(\"token\")\n\n    # This will be captured and written to the log.\n    print(\"Request is being sent!\")\n\n    # Make a notification pop-up in the UI.\n    posting.notify(\"Request is being sent!\")\n</code></pre>"},{"location":"guide/scripting/#example-post-response-script","title":"Example: Post-response script","text":"<p>The post-response script is run after the response is received. You can use this to extract data from the response, for example a JWT token, and set it as a variable to be used in later requests.</p> <pre><code>from posting import Posting\n\n\ndef on_response(response: httpx.Response, posting: Posting) -&gt; None:\n    # Print the status code of the response to the log.\n    print(response.status_code)\n\n    # Set a variable to be used in later requests.\n    # You can write '$auth_token' in the UI and it will be substituted with\n    # the value of the $auth_token variable.\n    posting.set_variable(\"auth_token\", response.headers[\"Authorization\"])\n</code></pre>"},{"location":"guide/scripting/#the-posting-object","title":"The <code>Posting</code> object","text":"<p>The <code>Posting</code> object provides access to the application context and useful methods:</p> <ul> <li><code>set_variable(name: str, value: object) -&gt; None</code>: Set a session variable</li> <li><code>get_variable(name: str, default: object | None = None) -&gt; object | None</code>: Get a session variable</li> <li><code>clear_variable(name: str) -&gt; None</code>: Clear a specific session variable</li> <li><code>clear_all_variables() -&gt; None</code>: Clear all session variables</li> <li><code>notify(message: str, title: str = \"\", severity: str = \"information\", timeout: float | None = None)</code>: Send a notification to the user</li> </ul> <p>Note that variables are described as \"session variables\" because they persist for the duration of the session (until you close Posting).</p>"},{"location":"guide/scripting/#execution-environment","title":"Execution environment","text":"<p>Scripts run in the same process and environment as Posting, so you should take care to avoid performing damaging global operations such as monkey-patching standard library modules.</p>"},{"location":"guide/scripting/#libraries","title":"Libraries","text":"<p>You can make use of any library that is available in the Python environment that Posting is running in. This means you can use all of the Python standard library as well as any of Posting's dependencies (such as <code>httpx</code>, <code>pyyaml</code>, <code>pydantic</code>, etc).</p> <p>If you install Posting with <code>uv</code>, you can easily add extra dependencies which you can then use in your scripts:</p> <pre><code>uv tool install posting --with &lt;library-name&gt;\n</code></pre>"},{"location":"guide/themes/","title":"Themes","text":""},{"location":"guide/themes/#overview","title":"Overview","text":"<p>Posting ships with several built-in themes, and also supports custom, user-made themes.</p> <p>When editing a theme on disk, Posting can show a live preview of the theme in effect, making it easy to design and test themes.</p>"},{"location":"guide/themes/#creating-a-theme","title":"Creating a theme","text":"<p>You can check where Posting will look for user-defined themes by running <code>posting locate themes</code> in your terminal. Place custom themes in this directory and Posting will load them on startup. Theme files must be suffixed with <code>.yaml</code>, but the rest of the filename is unused by Posting. Built-in themes are not in this directory, but are part of the Posting code itself.</p> <p>Here's an example theme file:</p> <pre><code>name: example  # use this name in your config file\nprimary: '#4e78c4'  # buttons, fixed table columns\nsecondary: '#f39c12'  # method selector, some minor labels\naccent: '#e74c3c'  # header text, scrollbars, cursors, focus highlights\nbackground: '#0e1726' # background colors\nsurface: '#17202a'  # panels, etc\nerror: '#e74c3c'  # error messages\nsuccess: '#2ecc71'  # success messages\nwarning: '#f1c40f'  # warning messages\n\n# Optional metadata\nauthor: Darren Burns\ndescription: A dark theme with a blue primary color.\nhomepage: https://github.com/darrenburns/posting\n</code></pre> <p>After adding a theme, you'll need to restart Posting for it to take effect.</p> <p>To use the theme, you can specify it in your <code>config.yaml</code> file:</p> <pre><code>theme: example\n</code></pre> <p>Note that the theme name is not defined by the filename, but by the <code>name</code> field in the theme file.</p> <p>Tip</p> <p>If you edit a theme on disk while Posting is using it, the UI will automatically refresh to reflect the changes you've made. This is enabled by default, but if you'd like to disable it, you can set <code>watch_themes</code> to <code>false</code> in your <code>config.yaml</code>.</p>"},{"location":"guide/themes/#syntax-highlighting","title":"Syntax highlighting","text":"<p>Syntax highlighted elements such as the URL bar, text areas, and fields which contain variables will be colored based on the semantic colors defined in the theme (<code>primary</code>, <code>secondary</code>, etc) by default.</p> <p>If you'd like more control over the syntax highlighting, you can specify a custom syntax highlighting colors inside the theme file.</p> <p>The example below illustrates some of the options available when it comes to customizing syntax highlighting.</p> <pre><code>text_area:\n  cursor: 'reverse'  # style the block cursor\n  cursor_line: 'underline'  # style the line the cursor is on\n  selection: 'reverse'  # style the selected text\n  gutter: 'bold #50e3c2'  # style the gutter\n  matched_bracket: 'black on green'  # style the matched bracket\nurl:\n  base: 'italic #50e3c2'  # style the 'base' of the url\n  protocol: 'bold #b8e986'  # style the protocol\nsyntax:\n  json_key: 'italic #4a90e2'  # style json keys\n  json_number: '#50e3c2'  # style json numbers\n  json_string: '#b8e986'  # style json strings\n  json_boolean: '#b8e986'  # style json booleans\n  json_null: 'underline #b8e986'  # style json null values\n</code></pre>"},{"location":"guide/themes/#method-styles","title":"Method styles","text":"<p>You can also specify custom styles for methods in the collection tree.</p> <p>Here's an example:</p> <pre><code>method:\n  get: 'underline #50e3c2'\n  post: 'italic #b8e986'\n  put: 'bold #b8e986'\n  delete: 'strikethrough #b8e986'\n</code></pre>"},{"location":"guide/themes/#x-resources-themes","title":"X resources themes","text":"<p>Posting supports using X resources for theming. To use this, enable the <code>use_xresources</code> option (see above).</p> <p>It requires the <code>xrdb</code> executable on your <code>PATH</code> and <code>xrdb -query</code> must return the following variables:</p> Xresources Description *color0 primary color: used for button backgrounds and fixed table columns *color8 secondary color: used in method selector and some minor labels *color1 error color: used for error messages *color2 success color: used for success messages *color3 warning color: used for warning messages *color4 accent color: used for header text, scrollbars, cursors, focus highlights *background background color *color7 surface/panel color <p>If these conditions are met, themes called <code>xresources-dark</code> and <code>xresources-light</code> will be available for use.</p>"}]}